from typing import Tuple, List

from PyPDF2 import PdfReader, PageObject
import re
import os


unit_listings = "handbooks/DeakinUniversity2019_Units-v4-accessible.pdf"
unit_listings_text_cache = "handbooks/unit_listings_text_cache.txt"
course_listings = "handbooks/DeakinUniversity2019_Courses-v4-accessible.pdf"
unit_details_first_page = 27
unit_details_last_page = 1210
units = []


def extract_unit_codes_and_titles(text: str) -> List[Tuple[str, str, str]]:
    # Comment generated by GPT-3.5 2023-04-06
    # Regex pattern to capture a unit code, title, and raw unit information from a handbook page.
    # Matches three uppercase letters followed by three digits as the unit code,
    # any text between a hyphen or em dash and the text " Enrolment modes:" or " Year:" as the title,
    # and any text before the next unit code using a positive lookahead assertion.
    pattern = re.compile(r"([A-Z]{3}\d{3}) [–-] (.+?)(?=\b Enrolment modes:|\b Year:)(.+?)(?=\b[A-Z]{3}\d{3} [–-]|\Z)")

    # Find all matches in the text
    matches = pattern.finditer(text)

    # Create a list of tuples containing the unit code, title, and raw unit information for each match
    result = [(match.group(1), match.group(2), match.group(3).strip()) for match in matches]

    return result


def read_unit_details(text: str, units: list):
    # Replace newline characters with spaces
    text = text.replace("\n", " ")
    # Convert any double spaces to single spaces
    text = text.replace("  ", " ")

    # Split the text by unit information
    units = extract_unit_codes_and_titles(text)

    print(text)


if __name__ == "__main__":
    # Read the handbook text from the cache file if it exists, otherwise create the cache file
    if os.path.exists(unit_listings_text_cache):
        with open(unit_listings_text_cache, "r", encoding="utf-8") as file:
            text = " ".join(file.readlines())
    else:
        # Read all unit information text from the handbook PDF
        reader = PdfReader(unit_listings)
        text = []
        for page in reader.pages[unit_details_first_page - 1:]:
            text.append(page.extract_text(orientations=(0,)))
        text = " ".join(text)

        # Write the text to a cache which will be used in the future
        with open(unit_listings_text_cache, "w", encoding="utf-8") as file:
            file.write(text)
    read_unit_details(text, units)
    print()
